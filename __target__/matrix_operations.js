'use strict';import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,__ipow__,
__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,filter,float,getattr,
hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import{gcd}from"./math.js";var __name__="matrix_operations";export var Fraction=__class__("Fraction",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,numerator,denominator){if(typeof denominator=="undefined"||denominator!=null&&
denominator.hasOwnProperty("__kwargtrans__"))var denominator=1;var common_divisor=gcd(numerator,denominator);self.numerator=Math.floor(numerator/common_divisor);self.denominator=Math.floor(denominator/common_divisor);if(self.denominator<0){self.numerator=0-self.numerator;self.denominator=0-self.denominator}})},get __str__(){return __get__(this,function(self){if(self.denominator==1)return str(self.numerator);else return"{}/{}".format(self.numerator,self.denominator)})},get __format__(){return __get__(this,
function(self,format_spec){return str(self)})},get __mul__(){return __get__(this,function(self,other){if(isinstance(other,Fraction))return Fraction(self.numerator*other.numerator,self.denominator*other.denominator);else return Fraction(self.numerator*other,self.denominator)})},get __rmul__(){return __get__(this,function(self,other){return self.__mul__(other)})},get __truediv__(){return __get__(this,function(self,other){if(isinstance(other,Fraction))return Fraction(self.numerator*other.denominator,
self.denominator*other.numerator);else return Fraction(self.numerator,self.denominator*other)})},get __rtruediv__(){return __get__(this,function(self,other){return Fraction(other*self.denominator,self.numerator)})},get __add__(){return __get__(this,function(self,other){if(isinstance(other,Fraction))return Fraction(self.numerator*other.denominator+other.numerator*self.denominator,self.denominator*other.denominator);else return Fraction(self.numerator+other*self.denominator,self.denominator)})},get __radd__(){return __get__(this,
function(self,other){return self.__add__(other)})},get __sub__(){return __get__(this,function(self,other){if(isinstance(other,Fraction))return Fraction(self.numerator*other.denominator-other.numerator*self.denominator,self.denominator*other.denominator);else return Fraction(self.numerator-other*self.denominator,self.denominator)})},get __rsub__(){return __get__(this,function(self,other){return self.__sub__(other)})},get __eq__(){return __get__(this,function(self,other){if(isinstance(other,Fraction))return self.numerator*
other.denominator==other.numerator*self.denominator;else return self.numerator==other*self.denominator})},get from_float(){return __getcm__(this,function(cls,value,precision){if(typeof precision=="undefined"||precision!=null&&precision.hasOwnProperty("__kwargtrans__"))var precision=1E-10;var numerator=round(value);var denominator=1;while(abs(value-numerator/denominator)>precision){denominator*=10;var numerator=round(value*denominator)}return cls(numerator,denominator)})}});export var get_input_matrix=
function(){var input_lines=[];while(true){var line=input().strip();if(line=="")break;else input_lines.append(line)}var input_str="\n".join(input_lines);var matrix_data=[];var row_max_length=max(function(){var __accu0__=[];for(var row of input_str.py_split("\n"))__accu0__.append(len(row.py_split()));return py_iter(__accu0__)}());for(var row of input_str.py_split("\n")){var row_data=[];for(var item of row.py_split())try{if(__in__("/",item)){var __left0__=map(int,item.py_split("/"));var numerator=__left0__[0];
var denominator=__left0__[1];row_data.append(Fraction(numerator,denominator))}else row_data.append(Fraction.from_float(float(item)))}catch(__except0__){if(isinstance(__except0__,ValueError)){var __except1__=ValueError("\u8f93\u5165\u9519\u8bef\uff1a'{}'\u4e0d\u662f\u6709\u6548\u7684\u6570\u5b57\u6216\u5206\u6570\u5f62\u5f0f\u3002".format(item));__except1__.__cause__=null;throw __except1__;}else throw __except0__;}row_data+=[Fraction(0)]*(row_max_length-len(row_data));matrix_data.append(row_data)}return matrix_data};
export var determinant=function(matrix){var size=len(matrix);if(size==1)return matrix[0][0];else if(size==2)return matrix[0][0]*matrix[1][1]-matrix[0][1]*matrix[1][0];else{var det=Fraction(0);for(var col=0;col<size;col++){var sub_matrix=function(){var __accu0__=[];for(var row of matrix.__getslice__(1,null,1))__accu0__.append(row.__getslice__(0,col,1)+row.__getslice__(col+1,null,1));return __accu0__}();var sub_det=determinant(sub_matrix);det+=matrix[0][col]*Math.pow(-1,col)*sub_det}return det}};export var transpose=
function(matrix){return function(){var __accu0__=[];for(var col=0;col<len(matrix[0]);col++)__accu0__.append(function(){var __accu1__=[];for(var row=0;row<len(matrix);row++)__accu1__.append(matrix[row][col]);return __accu1__}());return __accu0__}()};export var matrix_add_sub=function(matrix1,matrix2,operation){if(typeof operation=="undefined"||operation!=null&&operation.hasOwnProperty("__kwargtrans__"))var operation="+";if(len(matrix1)!=len(matrix2)||len(matrix1[0])!=len(matrix2[0])){var __except0__=
ValueError("\u77e9\u9635\u5c3a\u5bf8\u4e0d\u5339\u914d\uff0c\u65e0\u6cd5\u8fdb\u884c\u52a0\u6cd5\u6216\u51cf\u6cd5\u8fd0\u7b97\u3002");__except0__.__cause__=null;throw __except0__;}var result=[];for(var i=0;i<len(matrix1);i++){var row=[];for(var j=0;j<len(matrix1[0]);j++)if(operation=="+")row.append(matrix1[i][j]+matrix2[i][j]);else if(operation=="-")row.append(matrix1[i][j]-matrix2[i][j]);result.append(row)}return result};export var matrix_multiply=function(matrix1,matrix2){var rows1=len(matrix1);
var cols1=len(matrix1[0]);var rows2=len(matrix2);var cols2=len(matrix2[0]);if(cols1!=rows2){var __except0__=ValueError("\u77e9\u9635\u5c3a\u5bf8\u4e0d\u5339\u914d\uff0c\u65e0\u6cd5\u8fdb\u884c\u4e58\u6cd5\u8fd0\u7b97\u3002");__except0__.__cause__=null;throw __except0__;}var result=function(){var __accu0__=[];for(var _=0;_<rows1;_++)__accu0__.append(function(){var __accu1__=[];for(var _=0;_<cols2;_++)__accu1__.append(0);return __accu1__}());return __accu0__}();for(var i=0;i<rows1;i++)for(var j=0;j<
cols2;j++)for(var k=0;k<cols1;k++)result[i][j]+=matrix1[i][k]*matrix2[k][j];return result};export var cofactor=function(matrix,i,j){var sub_matrix=function(){var __accu0__=[];for(var row of matrix.__getslice__(0,i,1)+matrix.__getslice__(i+1,null,1))__accu0__.append(row.__getslice__(0,j,1)+row.__getslice__(j+1,null,1));return __accu0__}();var cofactor_value=Math.pow(-1,i+j)*determinant(sub_matrix);return cofactor_value};export var adjoint_matrix=function(matrix){var n=len(matrix);var adjoint=function(){var __accu0__=
[];for(var i=0;i<n;i++)__accu0__.append(function(){var __accu1__=[];for(var j=0;j<n;j++)__accu1__.append(cofactor(matrix,i,j));return __accu1__}());return __accu0__}();return transpose(adjoint)};export var matrix_inverse=function(matrix){var n=len(matrix);var det=determinant(matrix);if(det==0){var __except0__=ValueError("\u77e9\u9635\u4e0d\u53ef\u9006");__except0__.__cause__=null;throw __except0__;}var adjoint=adjoint_matrix(matrix);var inverse=function(){var __accu0__=[];for(var row of adjoint)__accu0__.append(function(){var __accu1__=
[];for(var element of row)__accu1__.append(element/det);return __accu1__}());return __accu0__}();return inverse};export var row_echelon_form=function(matrix){var echelon_form=function(){var __accu0__=[];for(var row of matrix)__accu0__.append(row.__getslice__(0,null,1));return __accu0__}();var __left0__=tuple([len(echelon_form),len(echelon_form[0])]);var rows=__left0__[0];var cols=__left0__[1];var pivot_row=0;for(var col=0;col<cols;col++){var non_zero_row=null;for(var row=pivot_row;row<rows;row++)if(echelon_form[row][col]!=
0){var non_zero_row=row;break}if(non_zero_row!==null){var __left0__=tuple([echelon_form[non_zero_row],echelon_form[pivot_row]]);echelon_form[pivot_row]=__left0__[0];echelon_form[non_zero_row]=__left0__[1];var pivot_value=echelon_form[pivot_row][col];echelon_form[pivot_row]=function(){var __accu0__=[];for(var elem of echelon_form[pivot_row])__accu0__.append(elem/pivot_value);return __accu0__}();for(var i=0;i<pivot_row;i++){var factor=echelon_form[i][col];echelon_form[i]=function(){var __accu0__=[];
for(var [j,elem]of enumerate(echelon_form[i]))__accu0__.append(elem-factor*echelon_form[pivot_row][j]);return __accu0__}()}for(var i=pivot_row+1;i<rows;i++){var factor=echelon_form[i][col];echelon_form[i]=function(){var __accu0__=[];for(var [j,elem]of enumerate(echelon_form[i]))__accu0__.append(elem-factor*echelon_form[pivot_row][j]);return __accu0__}()}pivot_row++}}return echelon_form};export var matrix_rank=function(matrix){var echelon_form=row_echelon_form(matrix);var non_zero_rows=sum(function(){var __accu0__=
[];for(var row of echelon_form)__accu0__.append(any(function(){var __accu1__=[];for(var val of row)__accu1__.append(val!=0);return py_iter(__accu1__)}()));return py_iter(__accu0__)}());return non_zero_rows};export var print_matrix=function(matrix){var max_length=max(function(){var __accu0__=[];for(var i=0;i<len(matrix);i++)for(var j=0;j<len(matrix[0]);j++)__accu0__.append(len(str(matrix[i][j])));return py_iter(__accu0__)}());for(var row of matrix)print(" ".join(function(){var __accu0__=[];for(var [i,
elem]of enumerate(row))__accu0__.append(str(elem).ljust(max_length+1));return py_iter(__accu0__)}()))};

//# sourceMappingURL=matrix_operations.map